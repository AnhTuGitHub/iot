import 'dart:convert';
import 'dart:io';

class ConnetSoketBroadLink {
  connectBroadLink() async {
    String x =
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\xc3\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00K-Group 2F\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x001234512345\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\n\x02\x00";
    List<int> bytes = utf8.encode(x);

    // print(new Utf8Codec().encode(x));

    var address = new InternetAddress("255.255.255.255");
    // var address = new InternetAddress("192.168.10.1");
    int port = 80;
    connect(address, port);
  }

  void connect(InternetAddress clientAddress, int port) {
    // String x =
    //     "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\xc3\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00K-Group 2F\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x001234512345\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\n\x02\x00";
    String x =
        '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb2\xc6\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Galaxy A51EC3C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00khanhbinh\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\t\x02\x00';
    Future.wait([RawDatagramSocket.bind(InternetAddress.anyIPv4, 0)])
        .then((values) {
      RawDatagramSocket udpSocket = values[0];
      udpSocket.multicastHops = 10;
      udpSocket.broadcastEnabled = true;
      udpSocket.writeEventsEnabled = true;
      udpSocket.readEventsEnabled = true;
      // udpSocket.receive();
      udpSocket.listen((RawSocketEvent e) {
        print(e);
        switch (e) {
          case RawSocketEvent.read:
            Datagram dg = udpSocket.receive();
            if (dg != null) {
              // dg.data.forEach((x) => print(x));
              print(dg.data.toString());
            }
            udpSocket.writeEventsEnabled = true;
            break;
          case RawSocketEvent.write:
            int test = udpSocket.send(x.codeUnits, clientAddress, port);
            print(test);
            break;
          case RawSocketEvent.closed:
            print('Client disconnected.');
        }
      });
    });
  }
}
